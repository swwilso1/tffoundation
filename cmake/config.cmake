################################################################################
#####
##### Tectiform TFFoundation CMake Configuration File
##### Created by: Steve Wilson
#####
################################################################################

set(CMAKE_CXX_STANDARD 20)

set(GENERATED_SOURCES_DIR "${CMAKE_CURRENT_BINARY_DIR}/generated_sources" CACHE STRING "Name of generated source directory")

set(FOUNDATION_LIBRARY_NAME "TFFoundation" CACHE STRING "Library name")

set(FOUNDATION_RUNTIME_INSTALL_DIR "bin" CACHE STRING "Executable object install directory.")

set(FOUNDATION_LIBRARY_INSTALL_DIR "lib" CACHE STRING "Library object install directory.")

set(FOUNDATION_ARCHIVE_INSTALL_DIR "${FOUNDATION_LIBRARY_INSTALL_DIR}" CACHE STRING "Archive library instal directory")

set(FOUNDATION_BUILD_DIR build CACHE STRING "Name of directory that contains exported .cmake files")

mark_as_advanced(
    FOUNDATION_RUNTIME_INSTALL_DIR
    FOUNDATION_LIBRARY_INSTALL_DIR
    FOUNDATION_ARCHIVE_INSTALL-DIR
    FOUNDATION_BUILD_DIR
)

if(APPLE)
    include(cmake/osx/config.cmake)
else()
    include(cmake/linux/config.cmake)
endif()

if(UNIX)
    include(cmake/platformunixtests.cmake)
endif()

if(SKIP_CXX_ALLOCATORS)
	list(APPEND FOUNDATION_SHARED_LIBRARY_PLATFORM_COMPILE_DEFINITIONS
		SKIP_TF_CXX_ALLOCATORS
	)
	list(APPEND FOUNDATION_STATIC_LIBRARY_PLATFORM_COMPILE_DEFINITIONS
		SKIP_TF_CXX_ALLOCATORS
	)
endif()

set(FOUNDATION_SHARED_LIBRARY_COMPILE_DEFINITIONS ${FOUNDATION_SHARED_LIBRARY_PLATFORM_COMPILE_DEFINITIONS})
set(FOUNDATION_SHARED_LIBRARY_COMPILE_FLAGS ${FOUNDATION_SHARED_LIBRARY_PLATFORM_COMPILE_FLAGS})
set(FOUNDATION_SHARED_LIBRARY_LINK_FLAGS ${FOUNDATION_SHARED_LIBRARY_PLATFORM_LINK_FLAGS})
set(FOUNDATION_SHARED_LIBRARY_LIBRARIES ${FOUNDATION_SHARED_LIBRARY_PLATFORM_LIBRARIES})

set(FOUNDATION_STATIC_LIBRARY_COMPILE_DEFINITIONS ${FOUNDATION_STATIC_LIBRARY_PLATFORM_COMPILE_DEFINITIONS})
set(FOUNDATION_STATIC_LIBRARY_COMPILE_FLAGS ${FOUNDATION_STATIC_LIBRARY_PLATFORM_COMPILE_FLAGS})
set(FOUNDATION_STATIC_LIBRARY_LINK_FLAGS ${FOUNDATION_STATIC_LIBRARY_PLATFORM_LINK_FLAGS})
set(FOUNDATION_STATIC_LIBRARY_LIBRARIES ${FOUNDATION_STATIC_LIBRARY_PLATFORM_LIBRARIES})

set(TEST_COMPILE_DEFINITIONS ${TEST_PLATFORM_COMPILE_DEFINITIONS})
set(TEST_COMPILE_FLAGS ${TEST_PLATFORM_COMPILE_FLAGS})
set(TEST_INCLUDE_DIRECTORIES ${TEST_PLATFORM_INCLUDE_DIRECTORIES})
set(TEST_LIBRARY_DIRECTORIES ${TEST_PLATFORM_LIBRARY_DIRECTORIES})
set(TEST_LINK_FLAGS ${TEST_PLATFORM_LINK_FLAGS})
set(TEST_LIBRARIES ${TEST_PLATFORM_LIBRARIES})

list(APPEND TEST_INCLUDE_DIRECTORIES ${CMAKE_CURRENT_BINARY_DIR}/headers)

include(cmake/headers.cmake)

include(cmake/conan.cmake)

option(CONAN_BUILD_ALL "Require conan install to rebuild from source packages" OFF)

list(APPEND CONAN_REQUIRES gtest/1.11.0)
if (CONAN_BUILD_ALL)
	set(CONAN_BUILD_ARG all)
else()
	set(CONAN_BUILD_ARG missing)
endif()

conan_cmake_configure(
	REQUIRES ${CONAN_REQUIRES}
	GENERATORS cmake_multi
	OPTIONS ${CONAN_OPTIONS}
)

macro(DO_CONAN_INSTALL_PER_CONFIG_TYPE TYPE)
	conan_cmake_autodetect(CONAN_SETTINGS BUILD_TYPE ${TYPE})

	conan_cmake_install(
		PATH_OR_REFERENCE .
		BUILD ${CONAN_BUILD_ARG}
		REMOTE conancenter
		SETTINGS ${CONAN_SETTINGS}
	)
endmacro()

if (CMAKE_CONFIGURATION_TYPES)
	foreach(TYPE ${CMAKE_CONFIGURATION_TYPES})
		DO_CONAN_INSTALL_PER_CONFIG_TYPE(${TYPE})
	endforeach()
elseif(CMAKE_BUILD_TYPE)
	DO_CONAN_INSTALL_PER_CONFIG_TYPE(${CMAKE_BUILD_TYPE})
else()
	message(FATAL_ERROR "CMAKE_BUILD_TYPE required in order to build Conan dependencies")
endif()

include(${CMAKE_BINARY_DIR}/conanbuildinfo_multi.cmake)
include(${CMAKE_BINARY_DIR}/conanbuildinfo_debug.cmake OPTIONAL)
include(${CMAKE_BINARY_DIR}/conanbuildinfo_release.cmake OPTIONAL)
include(${CMAKE_BINARY_DIR}/conanbuildinfo_relwithdebinfo.cmake OPTIONAL)
include(${CMAKE_BINARY_DIR}/conanbuildinfo_minsizerel.cmake OPTIONAL)

conan_basic_setup(TARGETS)
